#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"
require "optparse"
require "fileutils"
require "mini_magick"
require_relative "../lib/picture"

DEF_WEB_SIZE = -"1360x768>"
DEF_THUMB_SIZE = -"300x300>"
SHARPENING = -"0x1.0"
SUB_DIRS = [Picture::WEB_SUBDIR, Picture::THUMB_SUBDIR].freeze
IMG_QUALITY = 80
THREADS = 4

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.join(__dir__, __FILE__)} [options]"

  opts.on("-d", "--directory=DIRECTORY", "Pictures directory") do |dir|
    options[:pic_dir] = dir
  end

  opts.on("-w", "--web-size=SIZE", "Web size (default #{DEF_WEB_SIZE})") do |size|
    options[:web_size] = size
  end

  opts.on("-t", "--thumb-size=SIZE", "Thumbnails size (default #{DEF_THUMB_SIZE})") do |size|
    options[:thumb_size] = size
  end

  opts.on("-c", "--concurrency=THREADS", "How many threads to use to resize images (default #{THREADS})") do |threads|
    options[:concurrency] = Integer(threads)
  end

  opts.on("-f", "--force", "Override existing thumbnails") do |f|
    options[:force] = f
  end
end.parse!

pics_dir = Pathname(options.fetch(:pic_dir, Picture::DIR)).expand_path
pics_dir.children.select(&:directory?).each do |folder|
  SUB_DIRS.each do |sub_dir|
    folder.join(sub_dir).mkpath
  end
end

web_size, thumb_size = { web_size: DEF_WEB_SIZE,
                         thumb_size: DEF_THUMB_SIZE }.
                         map { |k, def_size|
  options.fetch(k, def_size).tap do |size|
    size << ">" unless size.end_with?(">")
  end
}
max_threads = options.fetch(:concurrency, THREADS)

Picture::EXTENSIONS.each do |ext|
  if options[:force]
    SUB_DIRS.each do |sub_dir|
      FileUtils.rm_f(Dir[pics_dir.join("*", sub_dir, "*.#{ext}")])
    end
  end

  pic_paths = Dir[pics_dir.join("*", "*.#{ext}")]
  queue = pic_paths.inject(Queue.new) { |q, path| q << Pathname(path) }

  (1..[queue.size, max_threads].min).map {
    Thread.new do
      img_src_path = begin
                       queue.pop(true)
                     rescue ThreadError; end

      while img_src_path
        img_bname = img_src_path.basename

        img_web_path = img_src_path.dirname.join(Picture::WEB_SUBDIR, img_bname)
        if options[:force] || !File.exist?(img_web_path)
          image = MiniMagick::Image.open(img_src_path)
          image.combine_options do |c|
            c.auto_orient
            c.quality(IMG_QUALITY)
            c.thumbnail(web_size)
            c.sharpen(SHARPENING)
          end
          image.write(img_web_path)
        end

        img_thumb_path = img_src_path.dirname.join(Picture::THUMB_SUBDIR, img_bname)
        if options[:force] || !File.exist?(img_thumb_path)
          image = MiniMagick::Image.open(img_src_path)
          image.combine_options do |c|
            c.auto_orient
            c.quality(IMG_QUALITY)
            c.thumbnail(thumb_size)
            c.sharpen(SHARPENING)
          end
          image.write(img_thumb_path)
        end

        img_src_path = begin
                         queue.pop(true)
                       rescue ThreadError; end
      end
    end
  }.each(&:join)
end
